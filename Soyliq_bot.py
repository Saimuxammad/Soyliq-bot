import os
import logging
import asyncio
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import openai
import psycopg2

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
DATABASE_URL = os.getenv('DATABASE_URL')

if not TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
if not OPENAI_API_KEY:
    logging.warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω. GPT-4 –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
if not DATABASE_URL:
    logging.warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API OpenAI
openai.api_key = OPENAI_API_KEY

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
db_conn = None
if DATABASE_URL:
    try:
        db_conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        db_conn.set_session(autocommit=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)


@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application
application = Application.builder().token(TOKEN).build()


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    welcome_text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )
    keyboard = [["–õ–æ–∫–∞—Ü–∏—è", "–£—Å–ª—É–≥–∏"], ["–¶–µ–Ω—ã", "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)


# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å."
    )
    await update.message.reply_text(help_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("üè¢ –ù–∞—à –∞–¥—Ä–µ—Å: —É–ª. –ü—Ä–∏–º–µ—Ä, 1, –≥. –ì–æ—Ä–æ–¥.")


async def services_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("üìã –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º: –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ, –ø–∏—Ç–∞–Ω–∏–µ, SPA –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.")


async def prices_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("üí∞ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –º–æ–∂–Ω–æ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.")


async def booking_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("üìû –î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ OpenAI GPT-4
async def chatgpt_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text
    try:
        loop = asyncio.get_running_loop()
        response = await loop.run_in_executor(
            None,
            lambda: openai.ChatCompletion.create(
                model="gpt-4",
                messages=[{"role": "user", "content": user_message}]
            )
        )
        reply_text = response['choices'][0]['message']['content'].strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API OpenAI: {e}")
        reply_text = "ü§ñ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ GPT-4."

    await update.message.reply_text(reply_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start_command))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(MessageHandler(filters.Regex('^(–õ–æ–∫–∞—Ü–∏—è)$'), location_handler))
application.add_handler(MessageHandler(filters.Regex('^(–£—Å–ª—É–≥–∏)$'), services_handler))
application.add_handler(MessageHandler(filters.Regex('^(–¶–µ–Ω—ã)$'), prices_handler))
application.add_handler(MessageHandler(filters.Regex('^(–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)$'), booking_handler))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chatgpt_handler))
application.add_error_handler(error_handler)


# –í–µ–±—Ö—É–∫ –¥–ª—è Telegram
@app.route(f"/{TOKEN}", methods=["POST"])
async def telegram_webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫."""
    if request.headers.get('content-type') == 'application/json':
        update_data = request.get_json()
        update = Update.de_json(update_data, application.bot)
        await application.initialize()
        try:
            await application.process_update(update)
        finally:
            await application.shutdown()
        return ('', 204)
    return ('Unsupported Media Type', 415)


# –ó–∞–ø—É—Å–∫ Flask (–¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞ –Ω–∞ Heroku, AWS –∏ —Ç.–¥.)
if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

